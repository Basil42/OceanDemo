#include <HLSLSupport.cginc>
#include "ComplexOperators.compute"
#define _NORMALMAP
#pragma shader_feature PREVIS
#pragma kernel ButterflyHorizontalCompute
#pragma kernel ButterflyVerticalCompute
#pragma kernel TimeSpectrum
#pragma kernel InversionAndPermutation
#ifdef _NORMALMAP
#pragma kernel ComputeNormal
#endif

Texture2D<float4> h0;
Texture2D<float4> _butterflyTexture;
//Apparently, you can pack these in "texture buffers" that have the same access optimization than textures
RWStructuredBuffer<Complex3> pingPong0;
RWStructuredBuffer<Complex3> pingPong1;

#define M_PI 3.1415926535897932

//got rid of the direction variable and simply calling the vertical and horizontal pass separately
CBUFFER_START(FrequentUpdatesVariables)
int stage;
int pingPong;//this value is implicitly contained in stage and could be computed using stage & 1
CBUFFER_END

CBUFFER_START(RarelyUpdated)
int N;
int L;
#ifdef _NORMALMAP
float pixelStep;//distance in Unity units between each horizontal pixel (as real dimensions are lost to concession made to float precision)
float2 scalingFactors;//obtain from the ocean shader to scale the displacement, horizontal factor in x, vertical factor in y
#endif
CBUFFER_END

[numthreads(16,16,1)]
void ButterflyHorizontalCompute(uint3 id : SV_DispatchThreadID)
{
    Complex3 H;//H and most the float2 in this kernel are complex numbers, but encapsulating them in struct here is unpractical
    int2 X = id.xy;
    const uint BufferIndex = id.x + id.y*N;
    const float4 ButterFlyData = _butterflyTexture[int2(stage,X.x)];//moved out of the branch
    const float2 w = ButterFlyData.xy;
    if(pingPong == 0)//this branch isn't dynamic so it should be fine
    {
        const Complex3 p = pingPong0[ButterFlyData.z + N*X.y];
        const Complex3 q = pingPong0[ButterFlyData.w + N*X.y];
        
        H = cmp_add(p,cmp_multiply(w,q));
        pingPong1[BufferIndex] = H;
        
    }else//having an additional check here seems pointless
    {
        const Complex3 p = pingPong1[ButterFlyData.z + N*X.y];
        const Complex3 q = pingPong1[ButterFlyData.w + N*X.y];
        H = cmp_add(p,cmp_multiply(w,q));
        pingPong0[BufferIndex] = H;
        
    }
}

[numthreads(16,16,1)]
void ButterflyVerticalCompute(uint3 id : SV_DispatchThreadID)
{
    Complex3 H;
    int2 X = id.xy;
    const uint BufferIndex = id.x + id.y*N;
    const float4 data = _butterflyTexture[int2(stage,X.y)];
    const float2 w = data.xy;//just for clarity (although at this point...)
    if(pingPong == 0)
    {
        const Complex3 p = pingPong0[X.x + N*data.z];
        const Complex3 q = pingPong0[X.x + N*data.w];

        H = cmp_add(p, cmp_multiply(w,q));
        pingPong1[BufferIndex] = H;
       

    }else
    {
        const Complex3 p = pingPong1[X.x + N*data.z];
        const Complex3 q = pingPong1[X.x + N*data.w];

        H = cmp_add(p, cmp_multiply(w,q));
        pingPong0[BufferIndex] = H;
        
    }
}
RWTexture2D<float4> displacement;
#ifdef _NORMALMAP
RWTexture2D<float4> normalMap;
float3 getPositionFromDisplacement(int2 index)
{
    float3 result = displacement[index].xyz;
    result.xz *= scalingFactors.x;
    result.xz += index * pixelStep;
    result.y *= scalingFactors.y;
    return result;
}
[numthreads(8,8,1)]
void ComputeNormal(uint3 id : SV_DispatchThreadID)//working on 2x2 pixel quads, choose the number of threads accordingly
{
    const int2 index00 = id.xy*2;
    float3 pixel00 = getPositionFromDisplacement(index00);
    const int2 index01 = int2(index00.x,index00.y+1);
    float3 pixel01 =getPositionFromDisplacement(index01);
    const int2 index10 = int2(index00.x+1,index00.y);
    float3 pixel10 = getPositionFromDisplacement(index10);
    const int2 index11 = int2(index10.x,index01.y);
    float3 pixel11 = getPositionFromDisplacement(index11);
    float3 ddx0 = pixel01.xyz -pixel00.xyz;
    float3 ddx1 = pixel11.xyz -pixel10.xyz;
    float3 ddy0 = pixel10.xyz - pixel00.xyz;
    float3 ddy1 = pixel11.xyz - pixel01.xyz;
    normalMap[index00] = float4(normalize(cross(ddx0,ddy0)),1.0);//if the normal ends up misoriented, it means the displacement allows vertices to "cross", which might be blamed on tesselation (displacement should probably be modulated by vertex density)
    normalMap[index01] = float4(normalize(cross(ddx0,ddy1)),1.0);
    normalMap[index10] = float4(normalize(cross(ddx1,ddy0)),1.0);
    normalMap[index11] = float4(normalize(cross(ddx1,ddy1)),1.0);
    
}
#endif

[numthreads(16,16,1)]
void InversionAndPermutation(uint3 id : SV_DispatchThreadID)
{
    const int2 X = id.xy;
    const uint BufferIndex = id.x + id.y*N;
    
    const float perm = (int(X.x + X.y) & 1) ? -1.0f : 1.0f;//true if x+y is odd
    
    
    Complex3 pingPongData = pingPong0[BufferIndex];//guaranteed to be the correct buffer as N is always pair
    const float3 h = float3(pingPongData.dx.x,pingPongData.dy.x,pingPongData.dz.x);//taking the real part of all components
    displacement[X] = float4(perm*(h/float(N*N)),1);
}
    float t;//this needs to be "tiled" somehow to not raise forever (and break)
    RWStructuredBuffer<Complex3> tilde_hkt;//a texture buffer might lay this out in memory like a texture
    
    [numthreads(16,16,1)]
    void TimeSpectrum(uint3 id: SV_dispatchThreadID)
    {
        float2 X = float2(id.xy) - (float(N)/2.0);
        float2 K = float2(2.0* M_PI * X.x/L, 2.0 * M_PI * X.y/L);

        float mag = length(K);
        if(mag < 0.00001) mag = 0.00001;

        const float w = sqrt(9.81 * mag);//from sq(w) = g*K used to suppress perpendicular waves
        
        //leaving this commented to show the intent
        // const float2 fourier_amplitude = h0_k[id.xy];
        // const float2 fourier_amplitude_conjugate = h0_MinusK[id.xy];
        float4 fourierAmplitudes = h0[id.xy];
        float cos_wt = cos(w*t);
        float sin_wt = sin(w *t);

        //euler formula
        const float2 exp_iwt = float2(cos_wt,sin_wt);
        const float2 exp_iwt_inv = float2(cos_wt,-sin_wt);
    
        //dy
        const float2 h_kt_dy = cmp_add(cmp_multiply(fourierAmplitudes.xy,exp_iwt)
            ,cmp_multiply(fourierAmplitudes.zw,exp_iwt_inv));
        //dx
        const float2 dx = float2(0.0,-K.x/mag);
        const float2 h_kt_dx = cmp_multiply(dx,h_kt_dy);
        //dz
        const float2 dz = float2(0.0,-K.y/mag);
        const float2 h_kt_dz = cmp_multiply(dz, h_kt_dy);
        const Complex3 result = { h_kt_dx, h_kt_dy, h_kt_dz};
        tilde_hkt[id.x + id.y*N] = result;
    
    }
    

