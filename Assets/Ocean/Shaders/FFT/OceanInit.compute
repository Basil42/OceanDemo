#pragma kernel SpectrumGen
#pragma kernel ButterflyTextureGen
#include <HLSLSupport.cginc>
#define _NORMALMAP

CBUFFER_START(RarelyUpdated)
int N;//sample size
int LogN;
int L;//most likely the patch size
//this buffer is currently shared with the OceanCompute shader, in which it contains more values
CBUFFER_END
float A;//??
float2 WindDirection;
float windSpeed;
static const float g = 9.81;

//I put both h0_k(RG) and h0_minusK(BA) in the same texture to save read/write operation 
RWTexture2D<float4> h0;
Texture2D<float4> noise;
SamplerState pointClampSampler;
#define M_PI 3.1415926535897932
#define kwExponent 2.0

float4 gaussRND(uint3 id)
{
    const float2 texCoord = float2(id.xy)/float(N);
    
    const float4 noiseValue = clamp(noise.SampleLevel(pointClampSampler,texCoord,0),0.0001f,1.0f);
    const float u0 = 2.0*M_PI*noiseValue.x;
    const float v0 = sqrt(-2.0 * log(noiseValue.y));
    const float u1 = 2.0*M_PI*noiseValue.z;
    const float v1 = sqrt(-2.0 * log(noiseValue.w));

    float4 rnd = float4(v0 * cos(u0), v0 * sin(u0), v1 * cos(u1), v1 * sin(u1));
    return rnd;
}

[numthreads(16,16,1)]
void SpectrumGen(uint3 id : SV_DispatchThreadID)
{
    const float2 X = float2(id.xy) - float(N)/2.0f;
    const float2 K = float2(2.0*M_PI * X.x/L, 2.0*M_PI*X.y/L);
    const float HMax = (windSpeed * windSpeed)/g;//little clash of symbols between the two papers here defined as L in the Tessendorf paper
    float mag = length(K);
    if(mag < 0.00001) mag = 0.00001;
    const float magSq = mag * mag;
    //sqrt (Ph(k))/sqrt(2), where Ph is the Phillips spectrum
    const float h0k = clamp(sqrt((A/(magSq * magSq))
        * pow(abs(dot(K, WindDirection)),kwExponent)
        * exp(-(1.0/(magSq *HMax * HMax)))
        * exp(-magSq * pow(L/2000.0,2.0)))/ sqrt(2.0),-4000,4000);//from the Tessendorf(1999) paper

    //sqrt(Ph(-k)/sqrt(2)
    const float h0_minusK = clamp(sqrt((A/(magSq * magSq))
        * pow(abs(dot(normalize(-K), normalize(WindDirection))),kwExponent)//exponents here are multiple of two
        * exp(-(1.0/(magSq *HMax * HMax)))
        * exp(-magSq * pow(L/2000.0,2.0)))/ sqrt(2.0),-4000,4000);

    float4 gauss_random = gaussRND(id);
    h0[id.xy] = float4(gauss_random.xy*h0k,gauss_random.z*h0_minusK,gauss_random.w*h0_minusK);
    
}

RWTexture2D<float4> ButterflyTexture;//N*log2(N) dimensions
StructuredBuffer<uint> bitReversedBuffer;//should be computed either at startup or when changing N. Some hardware have native ways of doing this (I'm guessing IRM machines would)
[numthreads(1,16,1)]//grouped by stage
void ButterflyTextureGen(uint3 id: SV_dispatchThreadID)
{
    float2 X = id.xy;
    const uint powerOfTwo = 1 << (id.x +1);//Almost certainly much faster than running pow(), but it should be benchmarked at some point
    const float k = (X.y * (float(N) / (float)powerOfTwo)) % N;
    float2 twiddle = float2(cos(2.0*M_PI*k/float(N)), sin(2.0*M_PI*k/float(N)));
    const uint butterflySpan = powerOfTwo >> 1;//very likely safe, if not use 2 << id.x

    const bool butterflyWing = (id.y % powerOfTwo) < butterflySpan ? true : false;//This is an infinitesimal optimisation allowed by hlsl, but it's prettier imo

    //several more optimisation are likely possible, but kernel only runs once (if the shader runs with it's initial parameters at all time)
    if(id.x ==0)
    {
        //I think this is faster (no branching in exchange for 2 additional additions/subtractions), a tad less clear though
        int topIndex = id.y - int(butterflyWing ?  0 : 1);
        int botIndex = id.y + int(butterflyWing ? 1 : 0);
        ButterflyTexture[id.xy] = float4(twiddle, bitReversedBuffer[topIndex],bitReversedBuffer[botIndex]);
    }
    //second to log2(N)
    else //If all id.x == 0 pixels are confined to a single thread group, it should a cheap branch
    {
        int ownIndex = id.y - int(butterflyWing ? 0 : butterflySpan);
        int otherIndex = id.y + int(butterflyWing ? butterflySpan : 0);
        ButterflyTexture[id.xy] = float4(twiddle,ownIndex,otherIndex);
    }
    
}